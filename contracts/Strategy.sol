// SPDX-License-Identifier: AGPL-3.0
// Feel free to change the license, but this is what we use

pragma solidity ^0.8.15;
pragma experimental ABIEncoderV2;

// These are the core Yearn libraries
import { BaseStrategy, StrategyParams } from "@yearnvaults/contracts/BaseStrategy.sol";
import { ICurveFi, IGauge, IGaugeFactory } from "../interfaces/curve.sol";
import { IUniswapV2Router02 } from "../interfaces/uniswap.sol";
import { SafeERC20, IERC20, Address } from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@openzeppelin/contracts/utils/math/Math.sol";

// Import interfaces for many popular DeFi projects, or add your own!
//import "../interfaces/<protocol>/<Interface>.sol";

contract Strategy is BaseStrategy {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;
    using Address for address;

    address public targetToken;
    ICurveFi public constant curve =
        ICurveFi(0x27E611FD27b276ACbd5Ffd632E5eAEBEC9761E40);
    IGauge public constant gauge =
        IGauge(0x15bB164F9827De760174d3d3dAD6816eF50dE13c);
    IGaugeFactory public constant gaugeFactory =
        IGaugeFactory(0xabC000d88f23Bb45525E447528DBF656A9D55bf5);

    IERC20 public constant dai =
        IERC20(0x8D11eC38a3EB5E956B052f67Da8Bdc9bef8Abf3E);
    IERC20 public constant usdc =
        IERC20(0x04068DA6C83AFCFA0e13ba15A6696662335D5B75);
    IERC20 public constant wftm =
        IERC20(0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83);
    IERC20 public constant crv =
        IERC20(0x1E4F97b9f9F913c46F1632781732927B9019C68b);

    IUniswapV2Router02 public constant router =
        IUniswapV2Router02(0xF491e7B69E4244ad4002BC14e878a34207E38c29);

    constructor(address _vault) BaseStrategy(_vault) {
        // You can set these parameters on deployment to whatever you want
        maxReportDelay = 2 days;
        crv.approve(address(router), type(uint256).max);
        wftm.approve(address(router), type(uint256).max);
        want.approve(address(gauge), type(uint256).max);

        usdc.approve(address(curve), type(uint256).max);
        dai.approve(address(curve), type(uint256).max);
        targetToken = address(usdc);
    }

    // ******** OVERRIDE THESE METHODS FROM BASE CONTRACT ************

    function name() external view override returns (string memory) {
        // Add your own name here, suggestion e.g. "StrategyCreamYFI"
        return "StrategyCurve2Pool";
    }

    function stakedBalance() public view returns (uint256) {
        return gauge.balanceOf(address(this));
    }

    function balanceOfWant() public view returns (uint256) {
        return want.balanceOf(address(this));
    }

    function estimatedTotalAssets() public view override returns (uint256) {
        // TODO: Build a more accurate estimate using the value of all positions in terms of `want`
        return balanceOfWant().add(stakedBalance());
    }

    function prepareReturn(
        uint256 _debtOutstanding
    )
        internal
        override
        returns (uint256 _profit, uint256 _loss, uint256 _debtPayment)
    {
        // TODO: Do stuff here to free up any returns back into `want`
        // NOTE: Return `_profit` which is value generated by all positions, priced in `want`
        // NOTE: Should try to free up at least `_debtOutstanding` of underlying position
        gaugeFactory.mint(address(gauge));
        uint256 _crvBal = crv.balanceOf(address(this));
        if (_crvBal > 0) {
            _sellToken(address(crv), _crvBal);
        }

        uint256 usdcBal = usdc.balanceOf(address(this));
        uint256 daiBal = dai.balanceOf(address(this));
        if (usdcBal > 0 || daiBal > 0) {
            curve.add_liquidity([usdcBal, daiBal], 0);
        }

        uint256 stakedBal = stakedBalance();
        if (_debtOutstanding > 0) {
            if (stakedBal > 0) {
                gauge.withdraw(Math.min(stakedBal, _debtOutstanding));
            }
            uint256 withdrawnBal = balanceOfWant();
            _debtPayment = Math.min(stakedBal, _debtOutstanding);
        }
        uint256 assets = estimatedTotalAssets();
        uint256 debt = vault.strategies(address(this)).totalDebt;

        if (assets > debt) {
            _profit = assets.sub(debt);
            uint256 _wantBal = balanceOfWant();
            if (_profit.add(_debtPayment) > _wantBal) {
                liquidateAllPositions();
            }
        } else {
            _loss = debt.sub(assets);
        }
    }

    function _sellToken(address token, uint256 amount) internal {
        address[] memory path = new address[](3);
        path[0] = address(token);
        path[1] = address(wftm);
        path[2] = address(targetToken);
        IUniswapV2Router02(router).swapExactTokensForTokens(
            amount,
            uint256(0),
            path,
            address(this),
            block.timestamp
        );
    }

    function adjustPosition(uint256 _debtOutstanding) internal override {
        // TODO: Do something to invest excess `want` tokens (from the Vault) into your positions
        // NOTE: Try to adjust positions so that `_debtOutstanding` can be freed up on *next* harvest (not immediately)
        uint256 _wantBal = want.balanceOf(address(this));
        if (_wantBal > 0) {
            gauge.deposit(_wantBal);
        }
    }

    function liquidatePosition(
        uint256 _amountNeeded
    ) internal override returns (uint256 _liquidatedAmount, uint256 _loss) {
        // TODO: Do stuff here to free up to `_amountNeeded` from all positions back into `want`
        // NOTE: Maintain invariant `want.balanceOf(this) >= _liquidatedAmount`
        // NOTE: Maintain invariant `_liquidatedAmount + _loss <= _amountNeeded`
        uint256 _wantBal = want.balanceOf(address(this));
        if (_amountNeeded > _wantBal) {
            uint256 _stakedBal = stakedBalance();
            if (_stakedBal > 0) {
                gauge.withdraw(
                    Math.min(_stakedBal, _amountNeeded.sub(_wantBal))
                );
            }
            uint256 _withdrawnBal = balanceOfWant();
            _liquidatedAmount = Math.min(_amountNeeded, _withdrawnBal);
            _loss = _amountNeeded.sub(_liquidatedAmount);
        } else {
            return (_amountNeeded, 0);
        }
    }

    function liquidateAllPositions() internal override returns (uint256) {
        // TODO: Liquidate all positions and return the amount freed.
        uint256 _stakedBal = stakedBalance();
        if (_stakedBal > 0) {
            gauge.withdraw(_stakedBal);
        }
        return balanceOfWant();
    }

    // NOTE: Can override `tendTrigger` and `harvestTrigger` if necessary

    function prepareMigration(address _newStrategy) internal override {
        // TODO: Transfer any non-`want` tokens to the new strategy
        // NOTE: `migrate` will automatically forward all `want` in this strategy to the new one
        uint256 _stakedBal = stakedBalance();
        if (_stakedBal > 0) {
            gauge.withdraw(_stakedBal);
        }
    }

    function setToken(uint256 _set) external onlyAuthorized {
        if (_set == 0) {
            targetToken = address(usdc);
        } else if (_set == 1) {
            targetToken = address(dai);
        } else {
            revert("Incorrect Input");
        }
    }

    // Override this to add all tokens/tokenized positions this contract manages
    // on a *persistent* basis (e.g. not just for swapping back to want ephemerally)
    // NOTE: Do *not* include `want`, already included in `sweep` below
    //
    // Example:
    //
    //    function protectedTokens() internal override view returns (address[] memory) {
    //      address[] memory protected = new address[](3);
    //      protected[0] = tokenA;
    //      protected[1] = tokenB;
    //      protected[2] = tokenC;
    //      return protected;
    //    }
    function protectedTokens()
        internal
        view
        override
        returns (address[] memory)
    {}

    /**
     * @notice
     *  Provide an accurate conversion from `_amtInWei` (denominated in wei)
     *  to `want` (using the native decimal characteristics of `want`).
     * @dev
     *  Care must be taken when working with decimals to assure that the conversion
     *  is compatible. As an example:
     *
     *      given 1e17 wei (0.1 ETH) as input, and want is USDC (6 decimals),
     *      with USDC/ETH = 1800, this should give back 1800000000 (180 USDC)
     *
     * @param _amtInWei The amount (in wei/1e-18 ETH) to convert to `want`
     * @return The amount in `want` of `_amtInEth` converted to `want`
     **/
    function ethToWant(
        uint256 _amtInWei
    ) public view virtual override returns (uint256) {
        // TODO create an accurate price oracle
        return _amtInWei;
    }
}
